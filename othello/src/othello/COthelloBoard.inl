
/**
 **************************************************************************************************************************************************************
 * Othello board class inline implementation
 **************************************************************************************************************************************************************
 * @file   COthelloBoard.inl
 * @author AV (Antoine Villepreux)
 * @date   01/06/2003
 **************************************************************************************************************************************************************/

/**
 **************************************************************************************************************************************************************
 * Othello board default (empty) constructor
  **************************************************************************************************************************************************************/
inline COthelloBoard::COthelloBoard()
{
}

/**
 **************************************************************************************************************************************************************
 * Othello board default (empty) destructor
  **************************************************************************************************************************************************************/
inline COthelloBoard::~COthelloBoard()
{
}

/**
 **************************************************************************************************************************************************************
 * Othello board destruction
 **************************************************************************************************************************************************************
 * @param pBoard pointer to the board
 **************************************************************************************************************************************************************/
inline void COthelloBoard::DeleteInstance(COthelloBoard*& pBoard)
{
	ms_pool.Delete(pBoard);
	pBoard = 0;
}

/**
 **************************************************************************************************************************************************************
 * Get color at given position
 **************************************************************************************************************************************************************
 * @param x board x-coordinates
 * @param y board y-coordinates
 * @return color
 **************************************************************************************************************************************************************/
inline COthelloBoard::EDisk COthelloBoard::GetDisk(int x, int y) const
{
	return (COthelloBoard::EDisk) m_aaBoard[x][y];
}

/**
 **************************************************************************************************************************************************************
 * Are coordinates inside the board ?
 **************************************************************************************************************************************************************
 * @param x board x-coordinates
 * @param y board y-coordinates
 * @return true if valid
 **************************************************************************************************************************************************************/
inline bool COthelloBoard::IsInside(int x, int y) const
{
	return (x>=0) && (y>=0) && (x<WIDTH) && (y<HEIGHT);
}

/**
 **************************************************************************************************************************************************************
 * Is this position free ?
 **************************************************************************************************************************************************************
 * @param x board x-coordinates
 * @param y board y-coordinates
 * @return true if free
 **************************************************************************************************************************************************************/
inline bool COthelloBoard::IsFree(int x, int y) const
{
	return IsInside(x,y) && (GetDisk(x,y) == EMPTY);
}

/**
 **************************************************************************************************************************************************************
 * Get this player score in this particular game situation
 **************************************************************************************************************************************************************
 * @ param ePlayer player
 * @return score
 **************************************************************************************************************************************************************/
inline int COthelloBoard::GetScore(EDisk ePlayer) const
{
	return m_aiScore[ePlayer] - m_aiScore[GetOpponent(ePlayer)];
}

/**
 **************************************************************************************************************************************************************
 * Get position score
 **************************************************************************************************************************************************************
 * @param x board x-coordinates
 * @param y board y-coordinates
 * @return score
 **************************************************************************************************************************************************************/
inline int COthelloBoard::GetScore(int x, int y)
{
	static const int aaiScore[WIDTH][HEIGHT] = 
	{
		{ 50,  -5,  5,  2,  2,  5,  -5,  50 },
		{ -5, -10,  1,  1,  1,  1, -10,  -5 },
		{  5,   1, 10,  1,  1, 10,   1,   5 },
		{  2,   1,  1,  0,  0,  1,   1,   2 },
		{  2,   1,  1,  0,  0,  1,   1,   2 },
		{  5,   1, 10,  1,  1, 10,   1,   5 },
		{ -5, -10,  1,  1,  1,  1, -10,  -5 },
		{ 50,  -5,  5,  2,  2,  5,  -5,  50 }
	};

	return aaiScore[x][y];
}

/**
 **************************************************************************************************************************************************************
 * Get opponent
 **************************************************************************************************************************************************************
 * @param ePlayer
 * @return opponent
 **************************************************************************************************************************************************************/
inline COthelloBoard::EDisk COthelloBoard::GetOpponent(EDisk ePlayer)
{
	return (ePlayer==WHITE) ? BLACK : WHITE;
}

/**
 **************************************************************************************************************************************************************
 * Get a player number of disks
 **************************************************************************************************************************************************************
 * @param EDisk ePlayer
 * @return count
 **************************************************************************************************************************************************************/
inline int COthelloBoard::GetNbDisks(EDisk ePlayer) const
{
	return m_aiNbDisks[ePlayer];
}

/**
 **************************************************************************************************************************************************************
 * Is game over ?
 **************************************************************************************************************************************************************
 * @return true if over
 **************************************************************************************************************************************************************/
inline bool COthelloBoard::IsGameOver() const
{
	return m_aiNbDisks[EMPTY] < 1;
}

/**************************************************************************************************************************************************************/
